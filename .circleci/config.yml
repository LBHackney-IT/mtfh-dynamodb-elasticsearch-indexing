version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.0.0
  aws-cli: circleci/aws-cli@2.0.2
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  docker-ecr:
    docker:
      - image: circleci/python:3.7
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  ecr-build-and-push-image:
    description: "Build and push docker image to ECR"
    parameters:
      account-url:
        type: env_var_name
      profile-name:
        default: default
        type: string
      region:
        type: env_var_name
      dockerfile:
        type: string
      path:
        type: string
      repo:
        type: string
      tag:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            aws ecr get-login-password --region $<<parameters.region>> --profile <<parameters.profile-name>> | docker login --username AWS --password-stdin $<<parameters.account-url>>
          name: Log into Amazon ECR
      - run:
          command: |
            registry_id=$(echo $<<parameters.account-url>> | sed "s;\..*;;g")
            number_of_tags_in_ecr=0
            docker_tag_args=""
            IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.tag >>"
            for tag in "${DOCKER_TAGS[@]}"; do
              docker_tag_args="$docker_tag_args -t $<<parameters.account-url>>/<<parameters.repo>>:$tag"
            done
            docker build \
              -f <<parameters.dockerfile>> \
              $docker_tag_args \
              <<parameters.path>>
          name: Build docker image
      - run:
          command: |
            IFS="," read -ra DOCKER_TAGS \<<< "<< parameters.tag >>"
            for tag in "${DOCKER_TAGS[@]}"; do
              docker push $<<parameters.account-url>>/<<parameters.repo>>:${tag}
            done
          name: Push image to Amazon ECR
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      environment_name:
        type: string
      ecs_cluster_name:
        type: string
      ecr_repo_name:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment_name>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: apply
          command: |
            export TF_VAR_environment_name=<<parameters.environment_name>>
            export TF_VAR_ecs_cluster_name=<<parameters.ecs_cluster_name>>
            export TF_VAR_ecr_repo_name=<<parameters.ecr_repo_name>>
            cd ./terraform/<<parameters.environment_name>>/
            terraform apply -auto-approve
  terraform-deploy-ecs-task:
    description: "Deploy ECS task using terraform."
    parameters:
      environment_name:
        type: string
      ecs_cluster_name:
        type: string
      ecr_host:
        type: string
      ecr_repo_name:
        type: string
      ecr_image_sha1:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment_name>>-ecs-task/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: apply
          command: |
            export TF_VAR_environment_name=<<parameters.environment_name>>
            export TF_VAR_ecs_cluster_name=<<parameters.ecs_cluster_name>>
            export TF_VAR_ecr_host=<<parameters.ecr_host>>
            export TF_VAR_ecr_repo_name=<<parameters.ecr_repo_name>>
            export TF_VAR_ecr_image_sha1=<<parameters.ecr_image_sha1>>
            cd ./terraform/<<parameters.environment_name>>-ecs-task/
            terraform apply -auto-approve
      - run:
          name: output
          command: |
            cd ./terraform/<<parameters.environment_name>>-ecs-task/
            mkdir -p workspace
            terraform output -raw aws_ecs_task_arn > workspace/aws_ecs_task_arn
      - persist_to_workspace:
          root: ./terraform/<<parameters.environment_name>>-ecs-task/workspace
          paths:
            - aws_ecs_task_arn
  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
      aws-account:
        type: string
      ecr_repo_name:
        type: string
      ecs_cluster_name:
        type: string
    steps:
      - *attach_workspace
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless
      - run:
          name: Build lambda
          command: |
            cd ./DynamoDBIndexing/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            AWS_ECS_TASK_ARN=`cat /tmp/workspace/aws_ecs_task_arn`
            cd ./DynamoDBIndexing/
            sls deploy --stage <<parameters.stage>> --account <<parameters.aws-account>> --aws_ecs_task_arn $AWS_ECS_TASK_ARN \
                       --ecr_repo_name <<parameters.ecr_repo_name>> --ecs_cluster_name <<parameters.ecs_cluster_name>> --conceal

jobs:
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --check
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment_name: "development"
          ecs_cluster_name: $ECS_CLUSTER_NAME
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-development"
  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment_name: "staging"
          ecs_cluster_name: $ECS_CLUSTER_NAME
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-staging"
  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment_name: "production"
          ecs_cluster_name: $ECS_CLUSTER_NAME
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-production"
  ecr-build-and-push-image-development:
    executor: docker-ecr
    steps:
      - aws-cli/install
      - ecr-build-and-push-image:
          dockerfile: ./DynamoDBIndexingCore/Dockerfile
          path: ./DynamoDBIndexingCore
          account-url: AWS_ECR_HOST_DEV
          repo: "mtfh-dynamodb-elasticsearch-indexing-development"
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
  terraform-deploy-ecs-task-to-development:
    executor: docker-terraform
    steps:
      - terraform-deploy-ecs-task:
          environment_name: "development"
          ecs_cluster_name: $ECS_CLUSTER_NAME
          ecr_host: $AWS_ECR_HOST_DEV
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-development"
          ecr_image_sha1: "${CIRCLE_SHA1}"
  terraform-deploy-ecs-task-to-staging:
    executor: docker-terraform
    steps:
      - terraform-deploy-ecs-task:
          environment_name: "staging"
          ecs_cluster_name: $ECS_CLUSTER_NAME
          ecr_host: $AWS_ECR_HOST_STAGING
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-staging"
          ecr_image_sha1: "${CIRCLE_SHA1}"
  terraform-deploy-ecs-task-to-production:
    executor: docker-terraform
    steps:
      - terraform-deploy-ecs-task:
          environment_name: "production"
          ecs_cluster_name: $ECS_CLUSTER_NAME
          ecr_host: $AWS_ECR_HOST_PRODUCTION
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-production"
          ecr_image_sha1: "${CIRCLE_SHA1}"
  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "development"
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-development"
          ecs_cluster_name: $ECS_CLUSTER_NAME
  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "staging"
          aws-account: $AWS_ACCOUNT_STAGING
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-staging"
          ecs_cluster_name: $ECS_CLUSTER_NAME
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "production"
          aws-account: $AWS_ACCOUNT_PRODUCTION
          ecr_repo_name: "mtfh-dynamodb-elasticsearch-indexing-production"
          ecs_cluster_name: $ECS_CLUSTER_NAME

workflows:
  check-and-deploy-development:
    jobs:
      - check-code-formatting
      - assume-role-development:
          context: api-assume-role-housing-development-context
          requires:
            - check-code-formatting
          filters:
            branches:
              only: master
      - terraform-init-and-apply-to-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: master
      # - aws-ecr/build_and_push_image:
      #     context: api-assume-role-housing-development-context
      #     name: build-and-push-image-development
      #     dockerfile: ./DynamoDBIndexingCore/Dockerfile
      #     path: ./DynamoDBIndexingCore
      #     account-url: AWS_ECR_HOST_DEV
      #     repo: "mtfh-dynamodb-elasticsearch-indexing-development"
      #     aws-access-key-id: AWS_ACCESS_KEY_ID
      #     aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      #     region: AWS_REGION
      #     tag: "${CIRCLE_SHA1}"
      #     filters:
      #       branches:
      #         only: master
      #     requires:
      #       - terraform-init-and-apply-to-development
      - ecr-build-and-push-image-development:
          requires:
            - terraform-init-and-apply-to-development
          filters:
            branches:
              only: master
      - terraform-deploy-ecs-task-to-development:
          requires:
            - ecr-build-and-push-image-development
          filters:
            branches:
              only: master
      - deploy-to-development:
          requires:
            - terraform-deploy-ecs-task-to-development
          filters:
            branches:
              only: master
  check-and-deploy-staging-and-production:
      jobs:
      - check-code-formatting
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          requires:
            - check-code-formatting
          filters:
             branches:
               only: release
      - terraform-init-and-apply-to-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: release
      - aws-ecr/build_and_push_image:
          context: api-assume-role-housing-staging-context
          name: build-and-push-image-staging
          dockerfile: ./DynamoDBIndexingCore/Dockerfile
          path: ./DynamoDBIndexingCore
          account-url: AWS_ECR_HOST_STAGING
          repo: "mtfh-dynamodb-elasticsearch-indexing-staging"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: release
          requires:
            - terraform-init-and-apply-to-staging
      - terraform-deploy-ecs-task-to-staging:
          requires:
            - build-and-push-image-staging
          filters:
            branches:
              only: release
      - deploy-to-staging:
          requires:
            - terraform-deploy-ecs-task-to-staging
          filters:
            branches:
              only: release
      - permit-production-terraform-release:
          type: approval
          requires:
            - deploy-to-staging
      - assume-role-production:
          context: api-assume-role-housing-production-context
          requires:
              - permit-production-terraform-release
          filters:
             branches:
               only: release
      - terraform-init-and-apply-to-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: release
      - aws-ecr/build_and_push_image:
          context: api-assume-role-housing-production-context
          name: build-and-push-image-production
          path: ./DynamoDBIndexingCore
          dockerfile: ./DynamoDBIndexingCore/Dockerfile
          account-url: AWS_ECR_HOST_PRODUCTION
          repo: "mtfh-dynamodb-elasticsearch-indexing-production"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_REGION
          tag: "${CIRCLE_SHA1}"
          filters:
            branches:
              only: release
          requires:
            - terraform-init-and-apply-to-production
      - permit-production-release:
          type: approval
          requires:
            - deploy-to-staging
          filters:
            branches:
              only: release
      - terraform-deploy-ecs-task-to-production:
          requires:
            - permit-production-release
            - build-and-push-image-production
          filters:
            branches:
              only: release
      - deploy-to-production:
          requires:
            - permit-production-release
            - terraform-deploy-ecs-task-to-production
          filters:
            branches:
              only: release
